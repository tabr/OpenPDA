diff --git a/x128_test2/src/runlevels.c b/x128_test2/src/runlevels.c
index f50f8b7..67bd10e 100644
--- a/x128_test2/src/runlevels.c
+++ b/x128_test2/src/runlevels.c
@@ -9,563 +9,38 @@
 void runlevel_0(void)//system just started
 	{
 	RunLevel	= 0;
-	//BackLight.IOInit();
-	n3310LcdClass::IOInit();
-	StatusLedPin::SetOutLow();
-	StatusLedPin::SetDirOut();//Так - нормально?
-	n3310LcdClass::HardwareInitialization();
-	#ifdef DEBUG_BUILD
-		//sprintf (lcd_buf, "runlevel 0");
-		LcdString(1,LCD_LINE_1, (char*)"runlevel 0");
-		LcdString(1,LCD_LINE_2, (char*)"XTAL...");
-		n3310LcdClass::RequestUpdate();
-	#endif
-	//BackLight.turnON();
-	HAL.GetClock()->SelectMaxExternal();
-//	HAL.Clock.select_16x2_MHZExternal();
-//	n3310LcdClass::IOInit();
-//	n3310LcdClass::HardwareInitialization();
-//	HAL.Clock.init_32MHZ_oscillator();
-//	_delay_ms(100);
-	/*
-	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
-	//sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
-	
-	sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
-
-	sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
-	sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
-	sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
-
-	sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
-
-	sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
-	sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
-	sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
-
-
-	sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
-	*/
-//	Lcd_dma_init();
-	#ifdef DEBUG_BUILD
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"Completed     ");
-	#endif
-	//_delay_ms(3000);
 	}
 void runlevel_1(void)//IO init
 	{
 	RunLevel	= 1;
-	#ifdef DEBUG_BUILD
-		LcdString(1,LCD_LINE_1, (char*)"runlevel 1");
-		LcdEmptyString(LCD_LINE_2);
-		n3310LcdClass::RequestUpdate();
-	#endif
-	HAL.IOInit();
-	Vibro.IOInit();
-	BackLight.IOInit();
-	Player.GetArtefactPorts()->IOInit();
-	Buttons.IOInit();
-	PDASound.IOInit();
-	
-	MediaFlashPinClk::SetDirOut();
-	MediaFlashPinClk::SetOutHigh();
-
-	MediaFlashPinMiso::SetDirIn();
-
-	MediaFlashPinMosi::SetDirOut();
-	MediaFlashPinMosi::SetOutHigh();
-
-	MediaFlashPinSS::SetDirOut();
-	MediaFlashPinSS::SetOutHigh();//deactivate
-	
-	ChargerPinCE::SetDirOut();
-	ChargerPinCE::SetOutHigh();
-	ChargerPinCharging::SetDirIn();
-	ChargerPinCharging::SetPullUp();
-	ChargerPinStandby::SetDirIn();
-	ChargerPinStandby::SetPullUp();
-
-	
-	VBUSPin::SetDirIn();
-	VBUSPin::SetPullDown();
-	#ifdef DEBUG_BUILD
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"Completed     ");
-	#endif
 	}
 void runlevel_2(void)//Hardware initialization
 	{
 	RunLevel	= 2;
-	#ifdef DEBUG_BUILD
-		LcdString(1,LCD_LINE_1, (char*)"runlevel 2");
-		LcdEmptyString(LCD_LINE_2);
-		n3310LcdClass::RequestUpdate();
-	#endif
-
-	#ifdef DEBUG_BUILD
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"ArtefactPortHW");
-	#endif
-	Player.GetArtefactPorts()->HardwareInitialization();
-
-	#ifdef DEBUG_BUILD
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"UsableItem TWI");
-	#endif
-	UsableItemTWI::HardwareInitialization();
-
-	#ifdef DEBUG_BUILD
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"Ext EEPROM TWI");
-	#endif
-	ExternalEEPROMTWI::HardwareInitialization();
-
-	#ifdef DEBUG_BUILD
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"stalker layer ");
-	#endif
-	StalkerLayer2.HardwareInitialization();
-	if (!(StalkerLayer2.L1.L0.isModuleReadyToWork()))
-		{
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"err RM0");
-		while(1);
-		}
-	#ifdef DEBUG_BUILD
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"RTC           ");
-	#endif
-	Stalker.InitRTC();
-	#ifdef DEBUG_BUILD
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"Interrupts    ");
-	#endif
-	Stalker.InitInterrupts();
-	#ifdef DEBUG_BUILD
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"PDASound      ");
-	#endif
-	PDASound.HardwareInitialization();
-	#ifdef DEBUG_BUILD
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"PrgStart...   ");
-	#endif
-	StalkerLayer2.programmStart();
-
-	/*#ifndef FM_DISABLED
-		#ifdef DEBUG_BUILD
-			sprintf (lcd_buf, "FM module     ");
-			LcdString(1,LCD_LINE_2);
-			LcdUpdate();
-		#endif
-		//twi_init(fm);
-	#endif*/
-	#ifdef DEBUG_BUILD
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"RFM AR1010[1]");
-	#endif
-	//_delay_ms(1000);
-	Ar1010.deviceEnable();
-	#ifdef DEBUG_BUILD
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"RFM AR1010[2]");
-	#endif
-	Ar1010.HardwareInitialization();
-	//_delay_ms(1000);
-
-	#ifdef DEBUG_BUILD
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"PowerManager");
-	#endif
-	PowerManager.HardwareInitialization();
-
-	#ifdef DEBUG_BUILD
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"Completed     ");
-	#endif
 	}
 
 void runlevel_3(void)//Tasks & interrupts
 	{
 	RunLevel	= 3;
-	#ifdef DEBUG_BUILD
-		LcdString(1,LCD_LINE_1, (char*)"runlevel 3");
-		LcdEmptyString(LCD_LINE_2);
-		n3310LcdClass::RequestUpdate();
-	#endif
-
 
-	#ifdef DEBUG_BUILD
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"Events        ");
-	#endif
-	EventSystem.registerUserEvent(&damageTaken,							EventSystemClass::EVID_DAMAGE_TAKEN);
-	//EventSystem.registerUserEvent(&usableItem_ConnDisconn,			EventSystemClass::EVID_USABLE_ITEM_CONNECTED_DISCONNECTED);
-	EventSystem.registerUserEvent(&PDAMenu_Main_ChargeStateChanged,		EventSystemClass::EVID_CHGARGE_STATE_CHANGED_TO);
-	//EventSystem.registerUserEvent(&EnvironmentProcessed,				EventSystemClass::EVID_ENVIRONMENT_PROCESSED);
-	
-	
-	
-	
-	//Timer.addTask(Anomaly.TaskProcess);								//01[p]
-	//Timer.addTask(StalkerLayer2.TaskEnvironmentLookAround);			//02
-	//Timer.addTask(StalkerLayer2.TaskEnvironmentProcess);			//03[p]
-	//Timer.addTask(Player.getArtefactPorts()->TaskScanForConnected);				//04[p]
-	//Timer.addTask(Player.getArtefactPorts()->TaskLedFlashProcess);				//05
-	//Timer.addTask(PDAMenu.TaskUpdateInformation);					//06
-	//Timer.addTask(Env.TaskEnvironmentProcess);						//07[p] caall moved to StalkerLayer2.TaskEnvironmentProcess
-	//Timer.addTask(UsableItem.TaskScanForConnectedIfNeed);			//08[p]
-	//Timer.addTask(UsableItem.TaskLedOnTick);						//09
-//	Timer.addTask(userFunction100msTask);							//10
-	//Timer.addTask(userFunction1000msTask);							//10[p]
-	//Timer.addTask(Player.TaskOneSecondPassed);						//11[p]
-//	Timer.addTask(Buttons.TaskScanForPressed);						//12[p/2]
-//	Timer.addTask(Buttons.TaskTryUnlockButton);						//13
-	//Timer.addTask(Player.getEffects()->TaskPlayerEffectsProcess);			//14[p]
-	//Timer.addTask(Vibro.TaskUpdateState);							//15
-	//Timer.addTask(PowerManager.PowerManagerADCMeasuremntsTask);		//16??!
-	//Timer.addTask(InGameEvents.TInGameEventsClass1secCheckStateTask);
-	
-	#ifdef DEBUG_BUILD
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"Timers        ");
-	#endif
-	TimerMS.RegisterListener(&Buttons);
-	TimerMS.RegisterListener(&InGameEvents);
-	TimerMS.RegisterListener(&PowerManager);
-	TimerMS.RegisterListener(&Vibro);
-	TimerMS.RegisterListener(&UsableItem);
-	TimerMS.RegisterListener(Player.GetArtefactPorts());
-	TimerMS.RegisterListener(&Env);
-	TimerMS.RegisterListener(&StalkerLayer2);
-	TimerMS.RegisterListener(&Player);
-	TimerMS.RegisterListener(&Anomaly);
-	TimerMS.RegisterListener(&PDAMenu);
-	//TimerMS.RegisterListener(Player.GetEffects());
-	TimerMS.RegisterListener(&userFunction1000msTask);
-	TimerMS.RegisterListener(&BackLight);
-	TimerMS.RegisterListener(&PlayerEffects);
-	
-	
-//	InGameEvents.registerNew(10,02, 10,02, 2, BlowoutEvent);
-	
-	
-//	Timer.addTask(PlayerEffectsNG.TaskPlayerEffectsNGOneSecondTick);//17??!
-	#ifdef DEBUG_BUILD
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"INT. starting ");
-	#endif
-	sei();
-	#ifdef DEBUG_BUILD
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"Completed     ");
-	#endif
 	}
 	
 void runlevel_4(void)//periphery init and data load
 	{
 	RunLevel	= 4;
 
-	n3310LcdClass::DMAActivate();
 
-	#ifdef DEBUG_BUILD
-		LcdString(1,LCD_LINE_1, (char*)"runlevel 4");
-		LcdEmptyString(LCD_LINE_2);
-		n3310LcdClass::RequestUpdate();
-	#endif
-
-	#ifdef DEBUG_BUILD
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"PDASettingsLoa");
-	#endif
-	PDASettings.loadDefaultSettings();
-	
-	#ifdef DEBUG_BUILD
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"First Batt ADC");
-	#endif
-	PowerManager.StartBatteryADCMeasurments();
-	
-	
-	//							имя				[макс.прочность]	[защ.пси]	[защ.хим]	[защ.электро]	[защ.огонь]	[защ.рад]	[защ.грав]	[макс.контейнеров]
-//	GameCFG.SuitsContainer.registerNew("(пусто)",		0,					0,			0,			0,				0,			0,			0,			1);
-//	GameCFG.SuitsContainer.registerNew("к.сталкера",	100,				0,			25,			25,				25,			25,			25,			3);
-//	GameCFG.SuitsContainer.registerNew("сева",			150,				10,			70,			90,				80,			90,			50,			5);
-
-//	char string0[DeviceConfigClass::ITEM_NAME_CHAR_ARRAY_LENGTH];
-	/*
-	//eeprom_write_block(string0,(void *)128,15);
-//	strcpy(string0, "(пусто)");
-	eeprom_read_block(string0,(void *)128,15);
-	if (string0[0] == 0xFF)
-		{
-		char tmp[15]	= "(пусто)       ";
-		eeprom_write_block(tmp,(void *)128,15);
-		sprintf(tmp,"к.сталкера    ");
-		eeprom_write_block(tmp,(void *)(128+15),15);
-		sprintf(tmp,"сева          ");
-		eeprom_write_block(tmp,(void *)(128+30),15);
-
-
-		sprintf (lcd_buf,"ЕЕПРОМ обновлён");
-		LcdString(1,LCD_LINE_5);
-		LcdUpdate();
-		while (1);
-		}
-	*/
-//	char string0[15]="сева";
-	//eeprom_read_block(string0,(void *)128,15);
-//	sprintf(string0,	"(пусто)       ");
-//														имя							[макс.прочность]	[защ.пси]	[защ.хим]	[защ.электро]	[защ.огонь]	[защ.рад]	[защ.грав]	[макс.контейнеров]
-//	GameCFG.SuitsContainer.registerNew(new SuitExample((char*)("(пусто)"),			0,					0,			0,			0,				0,			0,			0,			1));
-	//eeprom_read_block(string0,(void *)(128+15),15);
-//	sprintf(string0,	"к.сталкера    ");
-//	GameCFG.SuitsContainer.registerNew(new SuitExample((char*)("к.сталкера"),		100,				0,			25,			25,				25,			25,			25,			3));
-	//eeprom_read_block(string0,(void *)(128+30),15);
-//	sprintf(string0,	"сева          ");
-//	GameCFG.SuitsContainer.registerNew(new SuitExample((char*)("сева"),				150,				10,			70,			90,				80,			90,			50,			5));
-
-
-	//При версии протокола 1, вся нижеследующая дрянь должна лежать последовательно по 2 байта с начала ЕЕПРОМа, т.е. надо прочитать
-	//"EEPROM_DataClass::EEPROM_STRUCTURE::EEPROM_STRUCTURE_SIZE" байт
-
-	EEPROM_Data.setDataSize(EEPROM_DataClass::EEPROM_STRUCTURE::EEPROM_STRUCTURE_VERSION,				2);
-	EEPROM_Data.setDataSize(EEPROM_DataClass::EEPROM_STRUCTURE::EEPROM_STRUCTURE_PLAYER_DEFENCE_SELF,	TemporaryClass::DAMAGE_SOURCE_NUM);
-	EEPROM_Data.setDataSize(EEPROM_DataClass::EEPROM_STRUCTURE::EEPROM_STRUCTURE_PLAYER_NAME,			TemporaryClass::PLAYER_NAME_LENGTH);
-	EEPROM_Data.setDataSize(EEPROM_DataClass::EEPROM_STRUCTURE::EEPROM_STRUCTURE_PLAYER_STATISTICS,		(1 + TemporaryClass::ITEMS_NUM));
-	EEPROM_Data.setDataSize(EEPROM_DataClass::EEPROM_STRUCTURE::EEPROM_STRUCTURE_PLAYER_SKILLS,			PlayerSkillsClass::SKILLS_NUM);
-	EEPROM_Data.setDataSize(EEPROM_DataClass::EEPROM_STRUCTURE::EEPROM_STRUCTURE_QUESTS,				TemporaryClass::QUESTS_NUM);
-	EEPROM_Data.setDataSize(EEPROM_DataClass::EEPROM_STRUCTURE::EEPROM_STRUCTURE_PLAYER_VARS,			EEPROM_DataClass::PLAYER_VARS::PLAYER_VARS_SIZE);
-	EEPROM_Data.setDataSize(EEPROM_DataClass::EEPROM_STRUCTURE::EEPROM_STRUCTURE_PLAYER_ACTIVE_EFFECTS,	PlayerEffectsClass::STORAGE_SIZE);
-	EEPROM_Data.finishConfiguration();
-
-	GameCFG.SetDamageSourcesNum(TemporaryClass::DAMAGE_SOURCE_NUM);
-	/*
-	GameCFG.registerDamageSource(TemporaryClass::DAMAGE_SOURCE_NONE);
-	GameCFG.registerDamageSource(TemporaryClass::DAMAGE_SOURCE_GENERIC);
-	GameCFG.registerDamageSource(TemporaryClass::DAMAGE_SOURCE_SELF);
-	GameCFG.registerDamageSource(TemporaryClass::DAMAGE_SOURCE_RADIATION_EXTERNAL);
-	GameCFG.registerDamageSource(TemporaryClass::DAMAGE_SOURCE_RADIATION_DOSE_INTERNAL);
-	GameCFG.registerDamageSource(TemporaryClass::DAMAGE_SOURCE_FIRE);
-	GameCFG.registerDamageSource(TemporaryClass::DAMAGE_SOURCE_ELECTRICITY);
-	GameCFG.registerDamageSource(TemporaryClass::DAMAGE_SOURCE_CHEMICAL);
-	GameCFG.registerDamageSource(TemporaryClass::DAMAGE_SOURCE_GRAVY);
-	GameCFG.registerDamageSource(TemporaryClass::DAMAGE_SOURCE_PSY);
-	GameCFG.registerDamageSource(TemporaryClass::DAMAGE_SOURCE_BIO);
-	GameCFG.registerDamageSource(TemporaryClass::DAMAGE_SOURCE_BLOWOUT);
-	*/
-	
-
-
-	#include "GameTemplate_Effects.hpp"
-	#include "GameTemplate_Radiomarks.hpp"
-	#include "GameTemplate_Factions.hpp"
-	#include "GameTemplate_Anomalies.hpp"
-	#include "GameTemplate_Items.hpp"
-	#include "GameTemplate_Suites.hpp"
-	#include "GameTemplate_Quests.hpp"
-	#include "GameTemplate_Artefacts.hpp"
-	#include "GameTemplate_PDAMenu.hpp"
-	#include "GameTemplate_InGameEvents.hpp"
-	
-
-	
-
-	#ifdef DEBUG_BUILD
-
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"wrt Art Erase ");
-		//Player.GetArtefactPorts()->M25P05_BulkErase(0);
-		Player.GetArtefactPorts()->SetPortOut(0);
-		Artefact00.EraseDevice();		
-
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"wrt Art Write ");
-		//																	subtype																				param [0-3][charges,value,delay]
-		//[EXCLUDED]uint8_t item[8]={ArtefactPortsClass::ITEM_TYPE_MEDICAMENTS,	0,		ItemsClass::ITEMID_FIRST_AID,			ArtefactPortsClass::DEVICE_STATUS_OK,	0b11111111, 15,	50,0};
-		//[EXCLUDED]uint8_t item[8]={ArtefactPortsClass::ITEM_TYPE_MEDICAMENTS,	0,		ItemsClass::ITEMID_ANTIRAD,				ArtefactPortsClass::DEVICE_STATUS_OK,	0, 4,	0,0};
-		//[EXCLUDED]uint8_t item[8]={ArtefactPortsClass::ITEM_TYPE_MEDICAMENTS,	0,		ItemsClass::ITEMID_PSY_BLOKADA,			ArtefactPortsClass::DEVICE_STATUS_OK,	0b11111111, 0,	0,0};
-		//[EXCLUDED]uint8_t item[8]={ArtefactPortsClass::ITEM_TYPE_MEDICAMENTS,	0,		ItemsClass::ITEMID_RAD_PROTECOR,		ArtefactPortsClass::DEVICE_STATUS_OK,	0b11111111, 0,	0,0};
-		//[EXCLUDED]uint8_t item[8]={ArtefactPortsClass::ITEM_TYPE_MEDICAMENTS,	0,		ItemsClass::ITEMID_VODKA,				ArtefactPortsClass::DEVICE_STATUS_OK,	0b11111111, 0,	0,0};
-		//[EXCLUDED]uint8_t item[8]={ArtefactPortsClass::ITEM_TYPE_SUIT,			0,		PlayerSuitClass::SUIT_ID_SEVA,			ArtefactPortsClass::DEVICE_STATUS_OK,	100, 0,	0,0};
-		//[EXCLUDED]uint8_t item[8]={ArtefactPortsClass::ITEM_TYPE_SUIT,			0,		PlayerSuitClass::SUIT_ID_STALKER_SUIT,	ArtefactPortsClass::DEVICE_STATUS_OK,	100, 0,	0,0};
-
-
-		//uint8_t item[8]={ArtefactPortsClass::ITEM_TYPE_ARTEFACT,		0,		ArtefactClass::ARTEFACT_PLENKA, 0,0, 0, 0, 0};
-		//uint8_t item[8]={ArtefactPortsClass::ITEM_TYPE_ARTEFACT,		0,		ArtefactClass::ARTEFACT_OGN_SHAR, 0,0, 0, 0, 0};
-		uint8_t item[8]={ArtefactPortsClass::ITEM_TYPE_ARTEFACT,		0,		TemporaryClass::ARTEFACTID_LUN_SVET, 0,0, 0, 0, 0};
-		//uint8_t item[8]={ArtefactPortsClass::ITEM_TYPE_ARTEFACT,		0,		TemporaryClass::ARTEFACTID_VSPYSHKA, 0,0, 0, 0, 0};
-		//uint8_t item[8]={ArtefactPortsClass::ITEM_TYPE_ARTEFACT,		0,		TemporaryClass::ARTEFACTID_MEDUSA, 0,0, 0, 0, 0};
-		//uint8_t item[8]={ArtefactPortsClass::ITEM_TYPE_ARTEFACT,		0,		ArtefactClass::ARTEFACT_DUWA, 0,0, 0, 0, 0};
-//		uint8_t item[8]={ArtefactPortsClass::ITEM_TYPE_ARTEFACT,		0,		ArtefactClass::ARTEFACT_KAM_CVETOK, 0,0, 0, 0, 0};
-		//uint8_t item[8]={ArtefactPortsClass::ITEM_TYPE_ARTEFACT,		0,		TemporaryClass::ARTEFACTID_PUSTIWKA, 0,0, 0, 0, 0};
-		//Player.GetArtefactPorts()->M25P05_wholeItemWrite(0, item);
-		
-		Artefact00.WriteData(item, 8);
-		Player.GetArtefactPorts()->SetPortIn(0);
-
-		LcdStringUpdate(1,LCD_LINE_1, (char*)"4.5");
-		
-		//UsableItem.setConnectedItem(UsableItemClass::ITEM_TYPE_MEDICAMENTS, UsableItemClass::ITEM_SUBTYPE_NONE, TemporaryClass::ITEMID_FIRST_AID, UsableItemClass::DEVICE_STATUS_OK, 8, 0, 0, 0);
-		//UsableItem.setConnectedItem(UsableItemClass::ITEM_TYPE_MEDICAMENTS, UsableItemClass::ITEM_SUBTYPE_NONE, TemporaryClass::ITEMID_BANDAGE, UsableItemClass::DEVICE_STATUS_OK, 10, 0, 0, 0);
-		//UsableItem.setConnectedItem(UsableItemClass::ITEM_TYPE_MEDICAMENTS, UsableItemClass::ITEM_SUBTYPE_NONE, TemporaryClass::ITEMID_ANTIRAD, UsableItemClass::DEVICE_STATUS_OK, 8, 0, 0, 0);
-		//UsableItem.setConnectedItem(UsableItemClass::ITEM_TYPE_MEDICAMENTS, UsableItemClass::ITEM_SUBTYPE_NONE, TemporaryClass::ITEMID_VODKA, UsableItemClass::DEVICE_STATUS_OK, 100, 0, 0, 0);
-		//UsableItem.setConnectedItem(UsableItemClass::ITEM_TYPE_MEDICAMENTS, UsableItemClass::ITEM_SUBTYPE_NONE, TemporaryClass::ITEMID_RAD_PROTECTOR, UsableItemClass::DEVICE_STATUS_OK, 100, 0, 0, 0);
-		//UsableItem.setConnectedItem(UsableItemClass::ITEM_TYPE_MEDICAMENTS, UsableItemClass::ITEM_SUBTYPE_NONE, ItemsClass::ITEMID_PSY_BLOKADA, UsableItemClass::DEVICE_STATUS_OK, 130, 0, 0, 0);
-		//UsableItem.setConnectedItem(UsableItemClass::ITEM_TYPE_ELSE, UsableItemClass::ITEM_SUBTYPE_NONE, TemporaryClass::ITEMID_REPAIR_KIT, UsableItemClass::DEVICE_STATUS_OK, 255, 0, 0, 0);
-		//UsableItem.setConnectedItem(UsableItemClass::ITEM_TYPE_SUIT, UsableItemClass::ITEM_SUBTYPE_NONE, GameConfig::SUIT_ID_SEVA, UsableItemClass::DEVICE_STATUS_OK, 100, 0, 0, 0);
-//		UsableItem.setConnectedItem(UsableItemClass::ITEM_TYPE_SUIT, UsableItemClass::ITEM_SUBTYPE_NONE, TemporaryClass::SUIT_ID_SEVA, UsableItemClass::DEVICE_STATUS_OK, 208, 7, 0, 0);
-		UsableItem.setConnectedItem(UsableItemClass::ITEM_TYPE_SUIT, UsableItemClass::ITEM_SUBTYPE_NONE, TemporaryClass::SUIT_ID_SEVA, UsableItemClass::DEVICE_STATUS_OK, (uint16_t)1000, 0, 0);
-		//UsableItem.setConnectedItem(UsableItemClass::ITEM_TYPE_SUIT, UsableItemClass::ITEM_SUBTYPE_NONE, GameConfig::SUIT_ID_NONE, UsableItemClass::DEVICE_STATUS_OK, 0, 0, 0, 0);
-		//UsableItem.setConnectedItem(UsableItemClass::ITEM_TYPE_INFORMATION, UsableItemClass::ITEM_SUBTYPE_NONE, ItemInformationClass::ID_FOUND_SEVA, UsableItemClass::DEVICE_STATUS_OK, 0, 0, 0, 0);
-		//UsableItem.setConnectedItem(UsableItemClass::ITEM_TYPE_INFORMATION, UsableItemClass::ITEM_SUBTYPE_NONE, ItemInformationClass::ID_CODE, UsableItemClass::DEVICE_STATUS_OK, 0, 0, 0, 0);
-		//UsableItem.setConnectedItem(UsableItemClass::ITEM_TYPE_INFORMATION, UsableItemClass::ITEM_SUBTYPE_NONE, ItemInformationClass::ID_GOOUT, UsableItemClass::DEVICE_STATUS_OK, 0, 0, 0, 0);
-		//UsableItem.setConnectedItem(UsableItemClass::ITEM_TYPE_INFORMATION, UsableItemClass::ITEM_SUBTYPE_NONE, ItemInformationClass::ID_NONE, UsableItemClass::DEVICE_STATUS_OK, 8, 0, 0, 0);
-		
-		//UsableItem.setConnectedItem(1, 2, 3, 4, 5, 6, 7, 8);
-		UsableItem.WriteConnectedItem();
-		UsableItem.CleanConnectedItem();
-		/*
-		char tmp[9];
-		sprintf(tmp, "сталкер ");//последняя отбросится
-		UsableItem.hardware.writeToDevice(UsableItemClass::ITEM_INFORMATION_HEAD_PAGE, (uint8_t*)tmp);
-		sprintf(tmp, "'ЗЕТ':");
-		UsableItem.twi_write_page(UsableItemClass::ITEM_INFORMATION_HEAD_PAGE+1, (uint8_t*)tmp);
-		*/
-		/*
-		sprintf(tmp, "Нашел СЕ");//последняя отбросится
-		UsableItem.twi_write_page(UsableItemClass::ITEM_INFORMATION_DATA_PAGE, (uint8_t*)tmp);
-		sprintf(tmp, "ВУ. ЭТО ");
-		UsableItem.twi_write_page(UsableItemClass::ITEM_INFORMATION_DATA_PAGE+1, (uint8_t*)tmp);
-		sprintf(tmp, "оставлю ");//последняя отбросится
-		UsableItem.twi_write_page(UsableItemClass::ITEM_INFORMATION_DATA_PAGE+2, (uint8_t*)tmp);
-		sprintf(tmp, "тут.    ");
-		UsableItem.hardware.writeToDevice .twi_write_page(UsableItemClass::ITEM_INFORMATION_DATA_PAGE+3, (uint8_t*)tmp);
-		sprintf(tmp, "12345678");//последняя отбросится
-		UsableItem.twi_write_page(UsableItemClass::ITEM_INFORMATION_DATA_PAGE+4, (uint8_t*)tmp);
-		sprintf(tmp, "90abcdef");
-		UsableItem.twi_write_page(UsableItemClass::ITEM_INFORMATION_DATA_PAGE+5, (uint8_t*)tmp);
-		sprintf(tmp, "qwertyui");//последняя отбросится
-		UsableItem.twi_write_page(UsableItemClass::ITEM_INFORMATION_DATA_PAGE+6, (uint8_t*)tmp);
-		sprintf(tmp, "asdfghjk");
-		UsableItem.twi_write_page(UsableItemClass::ITEM_INFORMATION_DATA_PAGE+7, (uint8_t*)tmp);
-		*/
-	#endif
-	#ifdef DEBUG_BUILD
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"Completed     ");
-	#endif
 
 	}
 void runlevel_5(void)//All data loaded, ready to start
 	{
 	RunLevel	= 5;
-	#ifdef DEBUG_BUILD
-		LcdString(1,LCD_LINE_1, (char*)"runlevel 5");
-		LcdEmptyString(LCD_LINE_2);
-		n3310LcdClass::RequestUpdate();
-	#endif
 
-	#ifdef DEBUG_BUILD
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"PlayerLoad    ");
-	#endif
-	Player.Load();
-	//while(1);
-	#ifdef DEBUG_BUILD
-		LcdStringUpdate(1,LCD_LINE_2, (char*)"Btn Wait      ");
-	#endif
-	//if (HAL.IO.IsPinLow(ButtonsClass::PIN_MENU_HAL))
-	if (Buttons.isButtonDown(ButtonsClass::BUTTON_CENTER_MENU))
-		{
-		while(1)
-			{
-			if (StalkerLayer2.L1.L0.isNewEnvPacketReceived())
-				{
-				StalkerLayer2.L1.L0.getEnvPacketAndRSSI();
-
-				sprintf (Lcd.lcd_buf,"%03d%03d %03d", StalkerLayer2.L1.L0.SignalPower, StalkerLayer2.L1.L0.RSSI, StalkerLayer2.L1.L0.RSSIRaw);
-				//				StalkerLayer0.i=3;
-				LcdString(1,LCD_LINE_1);
-				sprintf (Lcd.lcd_buf,"%03d%03d %03d%03d", StalkerLayer2.L1.L0.packetContainerRX[0], StalkerLayer2.L1.L0.packetContainerRX[1], StalkerLayer2.L1.L0.packetContainerRX[2], StalkerLayer2.L1.L0.packetContainerRX[3]);
-				LcdString(1,LCD_LINE_2);
-#ifndef RFM69_HW_CRC
-				sprintf (Lcd.lcd_buf,"%03d%03d", StalkerLayer2.L1.L0.packetContainerRX[4], StalkerLayer2.L1.L0.packetContainerRX[5]);
-				LcdString(1,LCD_LINE_3);
-#endif // RFM69_HW_CRC
-				//				sprintf (lcd_buf,"%03d%03d %03d%03d", StalkerLayer0.packetContainer[4], StalkerLayer0.packetContainer[5], StalkerLayer0.packetContainer[6], StalkerLayer0.packetContainer[7]);
-				//				LcdString(1,LCD_LINE_3);
-				//				sprintf (lcd_buf,"%03d%03d %03d%03d", StalkerLayer0.packetContainer[8], StalkerLayer0.packetContainer[9], StalkerLayer0.packetContainer[10], StalkerLayer0.packetContainer[11]);
-				//				LcdString(1,LCD_LINE_4);
-				//				sprintf (lcd_buf,"%33d%03d %03d%03d", radio._RXBuffer[12], radio._RXBuffer[13], radio._RXBuffer[14], radio._RXBuffer[15]);
-				//				LcdString(1,LCD_LINE_5);
-				sprintf (Lcd.lcd_buf,"%01d %03u", StalkerLayer2.L1.L0.checkReceivedPacketCRC(), ++timeUpdateTimer);
-				LcdString(1,LCD_LINE_6);
-				n3310LcdClass::RequestUpdate();
-				//radio.receiveBegin();
-				StalkerLayer2.L1.L0.receiveBegin();
-				//_delay_ms(40);
-				}
-			else
-				{
-				//LcdClearUpdate();
-				}
-			}
-		}
-//	Quest.giveQuest(TemporaryClass::QID_FIND_BAR);
-//	Quest.giveQuest(TemporaryClass::QID_FIND_BARMAN);
-	
-//	Quest.
-
-	//Quest.completeQuest(QuestClass::QID_FIND_BAR);
-	//Quest.completeQuest(QuestClass::QID_FIND_BARMAN);
-//	#ifdef DEBUG_BUILD
-//		LcdStringUpdate(1,LCD_LINE_2, (char*)"Completed     ");
-//	#endif
-//	while (1);// {StatusLedPin::SetOutToggle(); _delay_ms(1000);}
 	}
 void runlevel_6(void)//start
 	{
 	RunLevel	= 6;
-	#ifdef DEBUG_BUILD
-		//Player.SetRadDose(20);
-		//EEPROM_Data.load();
-		//USABLE_ITEM_ITEM_CONNECTED_PORT.PIN6CTRL	= PORT_OPC_PULLUP_gc;
-		//USABLE_ITEM_ITEM_CONNECTED_PORT.OUTSET		= 1<<6;
-		LcdStringUpdate(1,LCD_LINE_1, (char*)"starting...");
-
-		//LcdString(1,LCD_LINE_2, Anomaly.getAnomalyName(1));
-		//LcdString(1,LCD_LINE_3, Anomaly.getAnomalyName(2));
-		//LcdUpdate();
-		//delay_ms(5000);
-		
-		
-		//delay_ms(500);
-		//		while(1);
-		//PlayerSuit.wear(TemporaryClass::SUIT_ID_SEVA, 99);
-		
-		Player.GetSuit()->Wear(TemporaryClass::SUIT_ID_SEVA, PlayerSuitClass::DURABILITY_FULL);
-		
-//		PDAMenu.selectMenu(PDAMenuClass::MENUID_EFFECTS);
-		//PDAMenu.selectMenu(PDAMenuClass::MENUID_QUESTS);
-		//PDAMenu.selectMenu(PDAMenuClass::MENUID_ARTEFACTS_CONNECTED);
-		//PDAMenu.selectMenu(PDAMenuClass::MENUID_CONNECTED_ITEM);
-		//PDAMenu.selectMenu(PDAMenuClass::MENUID_SUIT);
-		//PDAMenu.selectMenu(PDAMenuClass::MENUID_SPECS);
-		//PDAMenu.selectMenu(PDAMenuClass::MENUID_ACTIONS);
-		//Player.SetHealth(80);
-
-
-		//		PORTK.DIRCLR	= 1<<5;
-		//		PORTK.PIN6CTRL	= PORT_OPC_PULLUP_gc;
-		PDAMenu.selectDefaultMenu();
-	#else
-		//Player.SetHealth(90);
-		PDAMenu.selectDefaultMenu();
-		//PDAMenu.selectMenu(PDAMenuClass::MENUID_MAIN);
-		Quest.GiveQuest(1);
-		//Quest.GiveQuest(2);
-		//Quest.GiveQuest(3);
-		//Quest.GiveQuest(4);
-		//Quest.GiveQuest(5);
-		/*
-		PlayerSuitClass* PlayerSuit	= Player.GetSuit();
-		//PlayerSuit->Wear(TemporaryClass::SUIT_ID_ZARYA, 99);
-			PlayerSuit->Wear(TemporaryClass::SUIT_ID_ZARYA, 99);
-
-			sprintf (Lcd.lcd_buf,"%03d%03d %03u%03u", PlayerSuit->GetCurrentSuit()->GetCharacteristics()->Get(GameCharacteristicsClass::CHARACTERISTIC_CONTAINERS),PlayerSuit->getDefenceFrom(TemporaryClass::DamageSource::DAMAGE_SOURCE_GENERIC),PlayerSuit->getDefenceFrom(TemporaryClass::DamageSource::DAMAGE_SOURCE_RADIATION_EXTERNAL),PlayerSuit->getDefenceFrom(TemporaryClass::DamageSource::DAMAGE_SOURCE_RADIATION_DOSE_INTERNAL));
-			LcdString(1,LCD_LINE_1);
-			sprintf (Lcd.lcd_buf,"%03d", GameCFG.SuitsContainer.getSuiteInstance(1)->GetCharacteristics()->Get(GameCharacteristicsClass::CHARACTERISTIC_CONTAINERS));
-			LcdString(1,LCD_LINE_2);
-			sprintf (Lcd.lcd_buf,"%03d   ", PlayerSuit->GetCurrentSuit()->GetID());
-			LcdString(1,LCD_LINE_3);
-			sprintf (Lcd.lcd_buf,"%03d   ", GameCFG.GetDamageSourceNum());
-			LcdString(1,LCD_LINE_6);
-			
-			n3310LcdClass::RequestUpdate();
-			
-			while(1);
-			*/
-			#warning "suit incomplete!"
 
-	#endif
-	Vibro.activate(10);
 	RunLevel	= 7;
 	}
 #endif
\ No newline at end of file
